1. Vue-HTML 연결
=> Vue 기능을 처음 사용할 떄 먼저 해야 하는 일은 Vue-HTML 연결입니다.

1-1. const app = Vue.createApp()
=> vue로 HTML 요소를 제어하는 경우 요소의 자식들도 제어가 됩니다.
=> app.mount('')/ 해당 HTML 요소를 제어할 수 있는 메서드입니다. / 인자에는 CSS 선택자가 들어가야 합니다.
=> 이를 통해서 Vue를 사용해서 상호작용할 수 있습니다.

1-2. Vue.createApp({})
=> createApp 인자에 객체를 주어서 여러 옵션을 구성할 수 있습니다.

1. data option
=> 함수로 표현합니다.
=> data(){} 이런 형식으로 주로 사용합니다. (객체에서 메서드를 정의할 떄 속기법)
=> data 메서드는 항상 객체를 반환합니다.
=> 반환할 객체에서 키-값을 정의합니다. 값의 타입은 자유롭습니다.
=> Vue는 data 객체에서 반환하는 데이터 전체를 병합해서 전역 Vue 인스턴스 객체를 생성합니다.

2. app.mount()에 정의된 HTML에 컨텐츠에 {{}}를 사용하면 data 메서드가 반환하는 객체 프로퍼티를 사용할
수 있습니다.
=> 이를 보간법이라고 합니다.

3. {{}}
=> 해당 문법은 HTML 여닫는 태그 사이, 컨텐츠에서만 동작합니다.
=> 표현식을 사용할 수 있는 즉, React에서 {}라고 생각하면 됩니다.

4. methods option
=> 값으로 객체를 받고 객체 내부에서는 함수를 정의합니다.
=> 정의한 함수를 연결된 HTML에서 호출할 수 있습니다.
=> 컨텐츠에서 {{randomFunc()}}하면 return 되는 값이 HTML 컨텐츠에 반영됩니다.
=> 함수내에서 this를 사용하면 data value에 접근할 수 있습니다. (data props이 Vue 인스턴스 객체라서)


2. v-bind
=> HTML 속성은 {{}}으로 동적으로 설정하지 못합니다.
=> v-bind:attribute : 를 통해 vue의 동적인 값을 사용할 수 있습니다.
=> 이 떄 <a v-bind:href='dataValue'>Vue-Link<a/>


3. v-html
=> data props가 html 태그를 반환하고 html에서 사용할 떄 태그를 반영하지 않고 그대로 내보냅니다.
(크로스 사이팅 스크립트 공격을 보호하기 위해서)
=> vue와 연결된 html에서 태그 속성 v-html='data props'를 사용하면 html로 인식하여 변환하여 내보냅니다.



