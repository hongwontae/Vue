1. actions
=> 비동기 코드를 처리하는 설정 메서드입니다. ()
=> actions : {
    increment(context, payload){ // context는 설정을 처리할 수 있는 객체입니다.
        setTimeout(()=>{
            context.commit('increment')
        }, 2000)
    }
}

=> $store.dispath를 통해 action에 접근할 수 있습니다.


2. context 객체
=> context는 commit, dispatch, getters, state.. 등 컴포넌트에서 $store처럼 사용할 수 있는 객체입니다.
=> actions에서 비동기 처리 후 mutation을 처리하기 위해 주로 사용됩니다.


3. 매퍼 게터
=> import {mapGetters} from 'vuex';
=> computed 내부에서 spread 연산자를 사용하고 인자로 배열을 받고 배열의 요소는 getters의 이름을 넣습니다.
=> 위의 작업이 끝나면 자동으로 getter가 computed 인자가 되어 컴포넌트에서 사용할 수 있습니다.


4. 매퍼 액션
=> import {mapActions} from 'vuex';
=> methods 내부에서 spread 연산자를 사용하고 인자로 배열을 받고 배열의 요소는 actions의 이름을 넣습니다.
(또는 배열 대신 객체를 받아서 key-value 형식으로 원하는 이름으로 커스텀 할 수 있습니다.)
=> 위의 작업이 끝나면 자동으로 actions가 methods의 인자가 되어 컴포넌트에서 사용할 수 있습니다.
