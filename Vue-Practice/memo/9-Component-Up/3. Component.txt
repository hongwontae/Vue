1. Scoped Slot
=> 자식 => 부모 데이터 흐름을 가지는 특수한 문법입니다.

=> Slot을 정의하는 자식 컴포넌트에서 slot 태그의 props를 통해 내보낼 데이터를 정의합니다.
=> v-bind:item='goal'
=> item은 goal을 의미하는 객체의 프로퍼티로 부모에서 사용됩니다.

=> 부모 컴포넌트는 <template> 태그의 props에서 v-slot:'default or named Slot'='pItem'을 사용해서 불러옵니다.
=> 보간법을 사용하여 표현합니다. <h2>{{pItem.item}}</h2>

=> 만약 슬롯이 하나라면 <template #default=pItem>{{pItem.item}}</template>을 통해 축약할 수 있습니다.

=> slot에서 정의하여 올려준 v-bind:는 케밥 케이스이며 부모 컴포넌트에서 사용할 때는 케멜 케이스로 변환되지 않음
으로 케밥케이스로 사용해야 합니다.


2. 동적 컴포넌트
=> if을 사용해서 컴포넌트를 동적으로 표현하는 것은 효율적이지 못합니다.
=> template의 component 태그와 v-bind:is=''를 사용하여 동적으로 표현할 수 있습니다.
=> v-bind:is''에 컴포넌트 문자열이나, 컴포넌트 객체를 할당합니다.
=> method를 통해 is의 값을 변경하면 자동으로 리렌더링이 발생해 조건에 맞는 컴포넌트를 렌더할 수 있습니다.

=> 조건부로 렌더링할 떄 이전의 컴포넌트는 DOM에서 삭제됩니다.
=> <kepp-alive> 태그로 <component> 태그를 감싸면 캐시하여 상태를 보존할 수 있습니다.