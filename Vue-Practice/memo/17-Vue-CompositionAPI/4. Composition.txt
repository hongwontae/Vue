1. 템플릿 Ref
=> DOM Ref는 반응형 시스템에 영향을 받지 않습니다.
=> setup에서 ref를 호출하여 값을 할당합니다. => template의 요소에 return된 ref 값을 ref 속성에 바인딩합니다.
=> setup에서 ref를 사용합니다. 이 떄 inputRef.value로 접근해야 input 속성을 사용할 수 있습니다.


2. 컴포넌트, 프로퍼티 및 컴포지션
=> Composition API와 Options API의 소통은 가능합니다.
=> props로 받은 값을 setup에서 this로 접근할 수 없습니다. 
(setup이 호출되면 this의 값을 모르기 때문입니다.)
=> setup(props){}를 받아서 처리할 수 있습니다.
=> 받아온 props는 기본적으로 반응형을 그대로 받습니다.


3. context 객체
=> setup의 두 번쨰 매개변수인 context가 존재합니다.
=> attrs, emit, slots..
=> attrs 폴스루 속성입니다.
=> slots는 컴포넌트에 있는 슬롯 데이터에 접근할 수 있습니다.
=> emit은 커스텀 이벤트를 발생시키고자 할 떄 호출하는 함수입니다.
(this.$emit() === context.emit())


** fallthrough 속성이란?
=> 부모 컴포넌트에서 자식 컴포넌트에 전달했지만 props에 정의되지 않은 속성을 의미합니다.
=> 이를 막고 싶다면 자식 설정 객체에서 inheritAttrs : false를 설정하면 됩니다.


4. Provide/Inject
4-1. 부모 컴포넌트의 컴포지션 API에서 provide를 호출합니다.
4-2. provide('userAge', userage); => 키-값을 설정합니다.
4-3. 자식 컴포넌트의 컴포지션 API에서 inject를 호출합니다.
4-4. const age = inject('userAge'); => provide의 key를 inject의 인자로 추가하고 변수에 할당합니다.
4-5. 받은 값을 return하여 template에서 사용합니다.