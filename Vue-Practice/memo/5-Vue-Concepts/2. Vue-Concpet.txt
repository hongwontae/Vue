1. 여러 개의 Vue.createApp을 만들어서 사용할 수 있습니다.
=> 다만 여러 개의 app은 서로 독립적입니다.


2. tamplate
=> 특정 html 코드를 mount할 떄 Vue 앱의 템플릿으로 지정하게 됩니다.

=> createApp 설정 객체에서 template 속성이 존재합니다.
=> template : '<div>hello-world</div>'
=> JS 코드 내에서 템플릿을 지정하는 것입니다.


3. Ref
=> react의 useRef와 동일합니다.
=> template에 ref='식별할 문자열'/ 불러올 떄는 this.$refs.식별할 문자열.value로 가져올 수 있습니다.


4. Vue가 DOM을 업데이트 하는 방법
=> 이전 가상 DOM과 새로운 가상 DOM 값을 Vue가 비교하여 변경 사항만 업데이트 합니다.
=> 둘의 차이만 실제 DOM에 적용됩니다.


5. Vue 앱 생명주기
5-1. beforeCreate()
=> 앱이 완전히 초기화되기 전에 호출됩니다.

5-2. created() 
=> 앱이 초기화된 후 호출됩니다.
=> data 프로퍼티, tamplate을 컴파일합니다.

5-3. beforeMount()
=> 동적 플레이스홀더, 보간 제거된 후 구체적인 값으로 대체되는 단계입니다.

5-4. beforeMount()
=> Vue가 화면에 무엇가를 표시하기 직전의 단계입니다.

5-5. mounted()
=> Vue앱이 정의한 대로 모든 컨텐츠가 있는 HTML 요소를 추가합니다.
=> Vue 인스턴스가 완성됩니다.


6. 업데이트 생명주기
6-1. beforUpdate()
=> 데이터 변경이 일어났을 떄 호출됩니다.
=> 앱 내에서 업데이트 완전히 처리하지 않았을 떄의 단계입니다.

6-2. updated()
=> 업데이트 처리가 완료되었을 떄 단계입니다.


7. 삭제 생명주기
7-1. beforUnmount()
=> 컨텐츠 삭제 직전 실행되는 단계입니다.

7-2. unMounted()
=> 컨텐츠 삭제 후 실행되는 단계입니다.