1. 리다이렉션 및 Catch-All 라우트
=> route 설정 객체에서 path를 설정하고 redirect를 설정하면 path에 접속했을 떄
=> redirect path로 이동합니다.
=> {path : '/', redirect : '/teams'}

=> alias
=> {path : '/teams',component : TeamComponent, alias : '/'}
=> TeamComponent는 /이나 /teams에 URL로 접속할 수 있습니다.
=> redirect와 다른 점은 TeamComponent에 /로 들어가면 /teams로 url이 변경되지 않습니다.

=> cath-all route
=> 정의한 라우트들이 처리하지 못한 URL을 전부 처리하는 라우트입니다.
=> 가장 밑에서 정의하는게 좋습니다.
=> '/:notFound(.*)'
=> 정의하지 않은 url로 접속하면 catch-all router가 반응하여 해당 컴포넌트를 보여줍니다.


2. 중첩 라우트
=> 설정 객체에서 children을 한 번 더 사용해서 자식 라우트를 가질 수 있습니다.
=> {path : '/dash', component : TheDashboard, children : [
    {path : 'show', component : ShowMember},
    {path : 'post', component : PostMember}
]};
=> 자식 path는 자동으로 부모의 path에 이어져 붙여집니다.
=> 표현할 자식 컴포넌트는 부모 컴포넌트에서 <router-view>를 통해 표현해야 합니다.
=> 즉, 부모와 자식이 한 화면에 같이 렌더링됩니다.

=> 공통 UI를 유지하면서 일부 화면만 변경할 때 유용합니다.
=> URL 구조를 계층적으로 설계하고 싶을 떄 유용합니다.
=> 부모 데이터를 가져와서 자식에게 넘겨줄 떄 유용합니다.


3. 라우트 설정 객체 Name
=> 라우트을 설정할 떄 이름을 부여할 수 있습니다.
=> {path : '/teams', name : 'teams', component : TeamComponent}
=> 해당 이름은 <router-link :to>에서 사용할 수 있습니다.
=> to는 객체를 받을 수 있고 객체 안에 {
    name : 'teams',
    params : {teamId : this.id}
} 처럼 이동할 컴포넌트, 필요한 데이터를 직관적으로 전달 할 수 있습니다.


4. 쿼리 매개변수
=> router-link의 to을 통해 쿼리 매개변수를 설정할 수 있습니다.
=> 또는 객체를 통해 {
    query : {sort : 'asc'}
} 처럼 구성할 수 있습니다.
=> 받는 컴포넌트에서는 $router.query를 통해 받을 수 있습니다.

