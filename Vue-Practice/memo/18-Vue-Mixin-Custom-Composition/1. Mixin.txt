1. Mixin
=> options API를 사용한 재사용 로직을 의미합니다.

1-1. JS 파일을 생성합니다.
1-2. export default{}를 생성합니다.
1-3. data, methods, computed, watch, life-cycle 등을 정의합니다.
(components는 options API에 추가해야 합니다. Mixin으로 처리할 수 없습니다.)
1-4. Mixin 파일을 import하고 options API의 mixins : []의 값으로 추가합니다.
=> 재사용 로직을 만들 수 있습니다.


2. Mixin 병합
=> 믹스인을 사용하는 컴포넌트가 존재하고 options API가 존재할 떄 이 둘은 병합됩니다.
(data의 프로퍼티와 mixin의 data 프로퍼티가 충돌하지 않으면 동시에 존재합니다.)
=> 만약 충돌한다면 컴포넌트의 options API을 우선시합니다.


3. 전역 Mixin
=> 전역적으로 믹스인을 사용하려면 main.js에 mixin을 import합니다.
=> app.mixin(mixinName) 처리합니다.
=> 전역적으로 mixin이 실행됩니다. (렌더링된 컴포넌트 전체에 해당 mixin이 실행됩니다.)


4. 믹스인의 단점
4-1. 믹스인은 코드와 컴포넌트 구성의 이해에 방해가 될 수 있습니다.
4-2. 병합 동작이 방해가 될 수 있습니다.